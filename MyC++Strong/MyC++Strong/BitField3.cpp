/**
 * @file BitField3.cpp
 * @brief 位域或位段是一种数据结构，可以把数据以位的形式紧凑的储存，并且允许对此结构的位进行操作
 * 这种数据结构的一个好处是它可以使数据单元节省储存空间，当程序需要成千上万个数据单元时，这种方法就显得尤为重要
 * 第二个好处是位段可以很方便的访问一个整数的部分内容从而可以简化程序源代码。
 * 而这种数据结构的缺点是在于，位域实现依赖于具体的机器和系统，在不同平台可能有不同的结果，这导致了位域在本质上是不可移植的
 * 位域在内存中的布局是与机器有关的。
 * 位域的类型必须是整型或枚举类型，带符号类型中的位域的行为将因具体实现而定。
 * 取地址符号&不能用于位域，因为位域不是存储在内存中的独立位置，所以不能对位域使用&运算符。任何指针都不能指向类的位域。
 * @auther bin.zhang
 * @date 2024.05.07
 */

// 位域的初始化和位域的重映射
struct stuff {
	unsigned int field1 : 30;
	unsigned int field2 : 4;
	unsigned int field3 : 3;
};

int main() {
	// 位域的初始化
	// 位域可以在定义时初始化，但是初始化的值必须在位域的范围内，否则会导致编译错误
	// 位域的初始化域普通结构体初始化的方法相同
	struct stuff s1 = { 20,8,6 };
	// 或者直接为位域成员赋值
	struct stuff s2;
	s2.field1 = 20;
	s2.field2 = 8;
	s2.field3 = 6;
}

// 位域的重映射
// 声明一个大小为32Bits的位域
struct box {
	unsigned int ready : 2;
	unsigned int error : 2;
	unsigned int command : 4;
	unsigned int sector_no : 24;
} b1;

// 利用重映射将位域归零
int* p = (int*)&b1; // 将 位域结构体的地址 映射至整形(int*)的地址
//*p = 0; // 将整形的值赋值为0，即将位域的值归零，清除s1，将各成员归零


// 利用联合(union)将32Bits位域重映射至unsigned int型
// 联合是一种特殊的类，也是一种构造类型的数据结构。在一个联合内可以定义多种不同的数据类型，一个被说明位该联合类型的变量中
// 允许装入该联合所定义的任何一种数据结构，这些数据共享同一段内存，以达到节省空间的目的
// 联合与结构有一些相似之处。但两者有本质上的不同。在结构中各成员有各自的内存空间，一个结构变量的总长度是各成员长度之和(空结构除外，同时不考虑边界调整)
// 而在联合中，各成员共享一段内存空间，一个联合变量的长度等于最长的成员长度。
// 应该说明的是，这里所谓的共享不是指把多个成员同时装入一个联合变量内，而是指该联合变量可被赋予任一成员变量，但每次只能赋一种值，赋入新值则冲掉原值

union u_box {
	struct box st_box;
	unsigned int ui_box;
};
// x86 系统中 unsigned int 和 box 都为 32 Bits, 通过该联合使 st_box 和 ui_box 共享一块内存。
// 具体位域中哪一位与 unsigned int 哪一位相对应，取决于编译器和硬件。 利用联合将位域归零
union u_box u;
//u.ui_box = 0;